package github

import (
	"context"
	git "git/github-client-go"
	"git/github/git_schemas"
	"strconv"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceGitWorkflow() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceWorkflowCreate,
		ReadContext:   resourceWorkflowRead,
		UpdateContext: resourceWorkflowUpdate,
		DeleteContext: resourceWorkflowDelete,
		Schema: map[string]*schema.Schema{
			"workflow_file_name": git_schemas.StringSchemaReq(),
			"owner":              git_schemas.StringSchemaReq(),
			"repo":               git_schemas.StringSchemaReq(),
			"ref_branch":         git_schemas.StringSchemaOpt(),
			"ref_tag":            git_schemas.StringSchemaOpt(),
			"run_id":             git_schemas.IntSchemaComp(),
			"run_name":           git_schemas.StringSchemaComp(),
			"run_number":         git_schemas.IntSchemaComp(),
			"event":              git_schemas.StringSchemaComp(),
			"status":             git_schemas.StringSchemaComp(),
			"conclusion":         git_schemas.StringSchemaComp(),
			"workflow_id":        git_schemas.IntSchemaComp(),
			"html_url":           git_schemas.StringSchemaComp(),
			"total_count":        git_schemas.IntSchemaComp(),
			// "workflow_runs": &schema.Schema{
			// 	Type:     schema.TypeList,
			// 	Computed: true,
			// 	Elem: &schema.Resource{
			// 		Schema: map[string]*schema.Schema{
			// 			"id":                   git_schemas.IntSchemaComp(),
			// 			"name":                 git_schemas.StringSchemaComp(),
			// 			"node_id":              git_schemas.StringSchemaComp(),
			// 			"head_branch":          git_schemas.StringSchemaComp(),
			// 			"head_sha":             git_schemas.StringSchemaComp(),
			// 			"run_number":           git_schemas.IntSchemaComp(),
			// 			"event":                git_schemas.StringSchemaComp(),
			// 			"status":               git_schemas.StringSchemaComp(),
			// 			"conclusion":           git_schemas.StringSchemaComp(),
			// 			"workflow_id":          git_schemas.IntSchemaComp(),
			// 			"check_suite_id":       git_schemas.IntSchemaComp(),
			// 			"check_suite_node_id":  git_schemas.StringSchemaComp(),
			// 			"url":                  git_schemas.StringSchemaComp(),
			// 			"html_url":             git_schemas.StringSchemaComp(),
			// 			"pull_requests":        git_schemas.EmptyListSchemaComp(),
			// 			"created_at":           git_schemas.StringSchemaComp(),
			// 			"updated_at":           git_schemas.StringSchemaComp(),
			// 			"run_attempt":          git_schemas.IntSchemaComp(),
			// 			"run_started_at":       git_schemas.StringSchemaComp(),
			// 			"jobs_url":             git_schemas.StringSchemaComp(),
			// 			"logs_url":             git_schemas.StringSchemaComp(),
			// 			"check_suite_url":      git_schemas.StringSchemaComp(),
			// 			"artifacts_url":        git_schemas.StringSchemaComp(),
			// 			"cancel_url":           git_schemas.StringSchemaComp(),
			// 			"rerun_url":            git_schemas.StringSchemaComp(),
			// 			"previous_attempt_url": git_schemas.StringSchemaComp(),
			// 			"workflow_url":         git_schemas.StringSchemaComp(),
			// 			"head_commit": &schema.Schema{
			// 				Type:     schema.TypeMap,
			// 				Computed: true,
			// 				Elem: &schema.Resource{
			// 					Schema: map[string]*schema.Schema{
			// 						"id":        git_schemas.StringSchemaComp(),
			// 						"tree_id":   git_schemas.StringSchemaComp(),
			// 						"message":   git_schemas.StringSchemaComp(),
			// 						"timestamp": git_schemas.StringSchemaComp(),
			// 						"author": &schema.Schema{
			// 							Type:     schema.TypeMap,
			// 							Computed: true,
			// 							Elem: &schema.Resource{
			// 								Schema: map[string]*schema.Schema{
			// 									"name":  git_schemas.StringSchemaComp(),
			// 									"email": git_schemas.StringSchemaComp(),
			// 								},
			// 							},
			// 						},
			// 						"committer": &schema.Schema{
			// 							Type:     schema.TypeMap,
			// 							Computed: true,
			// 							Elem: &schema.Resource{
			// 								Schema: map[string]*schema.Schema{
			// 									"name":  git_schemas.StringSchemaComp(),
			// 									"email": git_schemas.StringSchemaComp(),
			// 								},
			// 							},
			// 						},
			// 					},
			// 				},
			// 			},
			// 			"repository": &schema.Schema{
			// 				Type:     schema.TypeMap,
			// 				Computed: true,
			// 				Elem: &schema.Resource{
			// 					Schema: map[string]*schema.Schema{
			// 						"id":        git_schemas.IntSchemaComp(),
			// 						"node_id":   git_schemas.StringSchemaComp(),
			// 						"name":      git_schemas.StringSchemaComp(),
			// 						"full_name": git_schemas.StringSchemaComp(),
			// 						"private":   git_schemas.BoolSchemaComp(),
			// 						"owner": &schema.Schema{
			// 							Type:     schema.TypeMap,
			// 							Computed: true,
			// 							Elem: &schema.Resource{
			// 								Schema: map[string]*schema.Schema{
			// 									"login":               git_schemas.StringSchemaComp(),
			// 									"id":                  git_schemas.IntSchemaComp(),
			// 									"node_id":             git_schemas.StringSchemaComp(),
			// 									"avatar_url":          git_schemas.StringSchemaComp(),
			// 									"gravatar_id":         git_schemas.StringSchemaComp(),
			// 									"url":                 git_schemas.StringSchemaComp(),
			// 									"html_url":            git_schemas.StringSchemaComp(),
			// 									"followers_url":       git_schemas.StringSchemaComp(),
			// 									"following_url":       git_schemas.StringSchemaComp(),
			// 									"gists_url":           git_schemas.StringSchemaComp(),
			// 									"starred_url":         git_schemas.StringSchemaComp(),
			// 									"subscriptions_url":   git_schemas.StringSchemaComp(),
			// 									"organizations_url":   git_schemas.StringSchemaComp(),
			// 									"repos_url":           git_schemas.StringSchemaComp(),
			// 									"events_url":          git_schemas.StringSchemaComp(),
			// 									"received_events_url": git_schemas.StringSchemaComp(),
			// 									"type":                git_schemas.StringSchemaComp(),
			// 									"site_admin":          git_schemas.BoolSchemaComp(),
			// 								},
			// 							},
			// 						},
			// 						"html_url":          git_schemas.StringSchemaComp(),
			// 						"description":       git_schemas.StringSchemaComp(),
			// 						"fork":              git_schemas.BoolSchemaComp(),
			// 						"url":               git_schemas.StringSchemaComp(),
			// 						"forks_url":         git_schemas.StringSchemaComp(),
			// 						"keys_url":          git_schemas.StringSchemaComp(),
			// 						"collaborators_url": git_schemas.StringSchemaComp(),
			// 						"teams_url":         git_schemas.StringSchemaComp(),
			// 						"hooks_url":         git_schemas.StringSchemaComp(),
			// 						"issue_events_url":  git_schemas.StringSchemaComp(),
			// 						"events_url":        git_schemas.StringSchemaComp(),
			// 						"assignees_url":     git_schemas.StringSchemaComp(),
			// 						"branches_url":      git_schemas.StringSchemaComp(),
			// 						"tags_url":          git_schemas.StringSchemaComp(),
			// 						"blobs_url":         git_schemas.StringSchemaComp(),
			// 						"git_tags_url":      git_schemas.StringSchemaComp(),
			// 						"git_refs_url":      git_schemas.StringSchemaComp(),
			// 						"trees_url":         git_schemas.StringSchemaComp(),
			// 						"statuses_url":      git_schemas.StringSchemaComp(),
			// 						"languages_url":     git_schemas.StringSchemaComp(),
			// 						"stargazers_url":    git_schemas.StringSchemaComp(),
			// 						"contributors_url":  git_schemas.StringSchemaComp(),
			// 						"subscribers_url":   git_schemas.StringSchemaComp(),
			// 						"subscription_url":  git_schemas.StringSchemaComp(),
			// 						"commits_url":       git_schemas.StringSchemaComp(),
			// 						"git_commits_url":   git_schemas.StringSchemaComp(),
			// 						"comments_url":      git_schemas.StringSchemaComp(),
			// 						"issue_comment_url": git_schemas.StringSchemaComp(),
			// 						"contents_url":      git_schemas.StringSchemaComp(),
			// 						"compare_url":       git_schemas.StringSchemaComp(),
			// 						"merges_url":        git_schemas.StringSchemaComp(),
			// 						"archive_url":       git_schemas.StringSchemaComp(),
			// 						"downloads_url":     git_schemas.StringSchemaComp(),
			// 						"issues_url":        git_schemas.StringSchemaComp(),
			// 						"pulls_url":         git_schemas.StringSchemaComp(),
			// 						"milestones_url":    git_schemas.StringSchemaComp(),
			// 						"notifications_url": git_schemas.StringSchemaComp(),
			// 						"labels_url":        git_schemas.StringSchemaComp(),
			// 						"releases_url":      git_schemas.StringSchemaComp(),
			// 						"deployments_url":   git_schemas.StringSchemaComp(),
			// 					},
			// 				},
			// 			},
			// 			"head_repository": &schema.Schema{
			// 				Type:     schema.TypeMap,
			// 				Computed: true,
			// 				Elem: &schema.Resource{
			// 					Schema: map[string]*schema.Schema{
			// 						"id":        git_schemas.IntSchemaComp(),
			// 						"node_id":   git_schemas.StringSchemaComp(),
			// 						"name":      git_schemas.StringSchemaComp(),
			// 						"full_name": git_schemas.StringSchemaComp(),
			// 						"private":   git_schemas.BoolSchemaComp(),
			// 						"owner": &schema.Schema{
			// 							Type:     schema.TypeMap,
			// 							Computed: true,
			// 							Elem: &schema.Resource{
			// 								Schema: map[string]*schema.Schema{
			// 									"login":               git_schemas.StringSchemaComp(),
			// 									"id":                  git_schemas.IntSchemaComp(),
			// 									"node_id":             git_schemas.StringSchemaComp(),
			// 									"avatar_url":          git_schemas.StringSchemaComp(),
			// 									"gravatar_id":         git_schemas.StringSchemaComp(),
			// 									"url":                 git_schemas.StringSchemaComp(),
			// 									"html_url":            git_schemas.StringSchemaComp(),
			// 									"followers_url":       git_schemas.StringSchemaComp(),
			// 									"following_url":       git_schemas.StringSchemaComp(),
			// 									"gists_url":           git_schemas.StringSchemaComp(),
			// 									"starred_url":         git_schemas.StringSchemaComp(),
			// 									"subscriptions_url":   git_schemas.StringSchemaComp(),
			// 									"organizations_url":   git_schemas.StringSchemaComp(),
			// 									"repos_url":           git_schemas.StringSchemaComp(),
			// 									"events_url":          git_schemas.StringSchemaComp(),
			// 									"received_events_url": git_schemas.StringSchemaComp(),
			// 									"type":                git_schemas.StringSchemaComp(),
			// 									"site_admin":          git_schemas.BoolSchemaComp(),
			// 								},
			// 							},
			// 						},
			// 						"html_url":          git_schemas.StringSchemaComp(),
			// 						"description":       git_schemas.StringSchemaComp(),
			// 						"fork":              git_schemas.BoolSchemaComp(),
			// 						"url":               git_schemas.StringSchemaComp(),
			// 						"forks_url":         git_schemas.StringSchemaComp(),
			// 						"keys_url":          git_schemas.StringSchemaComp(),
			// 						"collaborators_url": git_schemas.StringSchemaComp(),
			// 						"teams_url":         git_schemas.StringSchemaComp(),
			// 						"hooks_url":         git_schemas.StringSchemaComp(),
			// 						"issue_events_url":  git_schemas.StringSchemaComp(),
			// 						"events_url":        git_schemas.StringSchemaComp(),
			// 						"assignees_url":     git_schemas.StringSchemaComp(),
			// 						"branches_url":      git_schemas.StringSchemaComp(),
			// 						"tags_url":          git_schemas.StringSchemaComp(),
			// 						"blobs_url":         git_schemas.StringSchemaComp(),
			// 						"git_tags_url":      git_schemas.StringSchemaComp(),
			// 						"git_refs_url":      git_schemas.StringSchemaComp(),
			// 						"trees_url":         git_schemas.StringSchemaComp(),
			// 						"statuses_url":      git_schemas.StringSchemaComp(),
			// 						"languages_url":     git_schemas.StringSchemaComp(),
			// 						"stargazers_url":    git_schemas.StringSchemaComp(),
			// 						"contributors_url":  git_schemas.StringSchemaComp(),
			// 						"subscribers_url":   git_schemas.StringSchemaComp(),
			// 						"subscription_url":  git_schemas.StringSchemaComp(),
			// 						"commits_url":       git_schemas.StringSchemaComp(),
			// 						"git_commits_url":   git_schemas.StringSchemaComp(),
			// 						"comments_url":      git_schemas.StringSchemaComp(),
			// 						"issue_comment_url": git_schemas.StringSchemaComp(),
			// 						"contents_url":      git_schemas.StringSchemaComp(),
			// 						"compare_url":       git_schemas.StringSchemaComp(),
			// 						"merges_url":        git_schemas.StringSchemaComp(),
			// 						"archive_url":       git_schemas.StringSchemaComp(),
			// 						"downloads_url":     git_schemas.StringSchemaComp(),
			// 						"issues_url":        git_schemas.StringSchemaComp(),
			// 						"pulls_url":         git_schemas.StringSchemaComp(),
			// 						"milestones_url":    git_schemas.StringSchemaComp(),
			// 						"notifications_url": git_schemas.StringSchemaComp(),
			// 						"labels_url":        git_schemas.StringSchemaComp(),
			// 						"releases_url":      git_schemas.StringSchemaComp(),
			// 						"deployments_url":   git_schemas.StringSchemaComp(),
			// 					},
			// 				},
			// 			},
			// 		},
			// 	},
			// },
		},
	}
}

func resourceWorkflowCreate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(*git.Client)

	// Warning or errors can be collected in a slice type
	var diags diag.Diagnostics
	var payload git.WorkflowDispatchPayload

	orgOwner := d.Get("owner").(string)
	repo := d.Get("repo").(string)
	workflowName := d.Get("workflow_file_name").(string)
	refBranch := d.Get("ref_branch")
	refTag := d.Get("ref_tag")
	if refBranch != nil {
		payload = git.WorkflowDispatchPayload{
			Ref: refBranch.(string),
		}
	} else if refTag != nil {
		payload = git.WorkflowDispatchPayload{
			Ref: refTag.(string),
		}
	} else {
		diags = append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Resource Creation Failed",
			Detail:   "Atleast one of ref_branch or ref_tag is required",
		})
		return diags
	}

	p, err := c.CreateWorkflowByName(orgOwner, repo, workflowName, payload)
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(strconv.Itoa(p.WorkflowRuns[0].ID))
	resourceWorkflowRead(ctx, d, m)
	return diags
}

func resourceWorkflowRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(*git.Client)
	// Warning or errors can be collected in a slice type
	var diags diag.Diagnostics

	orgOwner := d.Get("owner").(string)
	repo := d.Get("repo").(string)
	workflowName := d.Get("workflow_file_name").(string)

	p, err := c.GetWorkflowRunsByName(orgOwner, repo, workflowName)
	if err != nil {
		return diag.FromErr(err)
	}

	runs := flattenWorkflowRuns(p)
	if err := d.Set("workflow_runs", runs); err != nil {
		return diag.FromErr(err)
	}

	return diags
}

func resourceWorkflowUpdate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	return resourceWorkflowRead(ctx, d, m)
}

func resourceWorkflowDelete(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	// Warning or errors can be collected in a slice type
	var diags diag.Diagnostics

	return diags
}

func flattenWorkflowRuns(runs *git.WorkflowRuns) []interface{} {
	if runs != nil {
		fRuns := make([]interface{}, len(*&runs.WorkflowRuns), len(*&runs.WorkflowRuns))

		for i, run := range runs.WorkflowRuns {
			c := make(map[string]interface{})
			c["id"] = run.ID
			c["name"] = run.Name
			c["run_number"] = run.RunNumber
			c["event"] = run.Event
			c["status"] = run.Status
			c["conclusion"] = run.Conclusion
			c["workflow_id"] = run.WorkflowID
			c["html_url"] = run.HTMLURL

			fRuns[i] = c
		}

		return fRuns
	}

	return make([]interface{}, 0)
}

// func flattenCoffee(run git.WorkflowRun) []interface{} {
// 	c := make(map[string]interface{})

// 	c["id"] = run.ID
// 	c["name"] = run.Name
// 	c["run_number"] = run.RunNumber
// 	c["event"] = run.Event
// 	c["status"] = run.Status
// 	c["conclusion"] = run.Conclusion
// 	c["workflow_id"] = run.WorkflowID
// 	c["html_url"] = run.HTMLURL
// 	// c["repository"] = run.Repository.Name
// 	// c["conclusion"] = run.Conclusion
// 	// c["conclusion"] = run.Conclusion
// 	// c["conclusion"] = run.Conclusion
// 	// c["conclusion"] = run.Conclusion
// 	// c["conclusion"] = run.Conclusion

// 	return []interface{}{c}
// }
